Using System
Using System.Text
Using System.Collections.Generic
Using System.Data

DclNamespace SodaAVR

BegClass Menus Access(*Public)
		DclFld db type(ConnectToServer)

		BegConstructor access(*public)
			db = *new ConnectToServer()
		EndConstructor

		BegFunc MainMenu Access(*Public) Type(*Packed) Len(2,0)
			DclFld sel Type(String)
			
			dowhile *true
				Console.Clear()
				Console.WriteLine(" ______________________________________________")
				Console.WriteLine( "| InGen Cola                                   |")
				Console.WriteLine( "|----------------------------------------------|")
				Console.WriteLine( "| Current         Show Previous entries        |")
				Console.WriteLine( "| New             Make new Entry               |")
				Console.WriteLine( "| Stats           Soda Statistics              |")
				Console.WriteLine( "| Maint           Database Maintanince         |")
				Console.WriteLine( "| EXIT            Quit Program                 |")
				Console.WriteLine( "|______________________________________________|")
				Console.Write( ">>> ")
				sel = Console.ReadLine()

				sel = sel.ToLower()

				Select
					when sel = "current"
						currentMenu()
					when sel = "new"
						NewMenu()
					when sel = "stats"
						statsMenu()
					when sel = "maint"
						MaintenanceMenu()
					when sel = "exit"
						LeaveSr 0
				EndSl
			enddo
			leavesr 0
		EndFunc

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegFunc NewMenu Access(*Public) Type(*Packed) Len(2,0)
			DclFld sel Type(String)
			DclFld doLoop Type(*Packed) len(2,0) inz(1)

			Console.Clear()
			dowhile doLoop =1
				Console.WriteLine( " ______________________________________________")
				Console.WriteLine( "| InGen Cola                 New Records       |")
				Console.WriteLine( "|----------------------------------------------|")
				Console.WriteLine( "| Profets         Enter dayley profets         |")
				Console.WriteLine( "| Purchase        Enter cost of soda spent     |")
				Console.WriteLine( "| CD              Back to Main Menu            |")
				Console.WriteLine( "|______________________________________________|")
				Console.Write( ">>> ")
				sel = Console.ReadLine()

				sel = sel.ToLower()

				Select
					when sel = "profets"
						NewProfets()
					when sel = "purchase"
						NewPurchase()
					when sel = "cd"
						LeaveSr 0
					other
						Console.Clear()
				EndSl
			EndDO
			LeaveSr 0
		EndFunc
		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegFunc StatsMenu Access(*Public) Type(*Packed) Len(2,0)
			DclFld sel Type(String)
			DclFld doLoop Type(*Packed) len(2,0) inz(1)

			Console.Clear()
			dowhile doLoop =1
				Console.WriteLine( " ______________________________________________")
	 		    Console.WriteLine( "| InGen Cola                 Statistics        |")
			    Console.WriteLine( "|----------------------------------------------|")
			    Console.WriteLine( "| add             Add this years profets       |")
			    Console.WriteLine( "| avgg            Get avg. grose for the year  |")
			    Console.WriteLine( "| avgn            Get avg. net for this year   |")
			    Console.WriteLine( "| avgs            Get avg. spendings           |")
			    Console.WriteLine( "| net             Calculate profets per-can    |")
			    Console.WriteLine( "| sum             Calculate Net Profets        |")
			    Console.WriteLine( "| weekest         Estemate weekly profets      |")
			    Console.WriteLine( "| CD              Back to Main Menu            |")
			    Console.WriteLine( "|______________________________________________|")
				Console.Write( ">>> ")
				sel = Console.ReadLine()

				sel = sel.ToLower()

				Select
					when sel = "add"
						StatAdd()
					when sel = "avgg"
						StatAvgg()
					when sel = "avgn"
						StatAvgn()
					when sel = "avgs"
						StatAvgs()
					when sel = "net"
						statNet()
					when sel = "sum"
						StatSum()
					when sel = "weekest"
						StatWeekEst()
					when sel = "cd"
						LeaveSr 0
				EndSl
			EndDO
			LeaveSr 0
		EndFunc
		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegFunc currentMenu Access(*public) Type(*packed) Len(2,0)
			DclFld Sel Type(String)
			DclFld doLoop Type(*Packed) len(2,0) inz(1)

			Console.Clear()
			DoWhile doLoop =1
				Console.WriteLine(" ______________________________________________")
				Console.WriteLine("| InGen Cola                 Current Records   |")
				Console.WriteLine("|----------------------------------------------|")
				Console.WriteLine("| CashOut         Show all profets collected   |")
				Console.WriteLine("| Spendings       Show spending records        |")
				Console.WriteLine("| inventory       Show weekly inventory        |")
				Console.WriteLine("| CD              Back to Main Menu            |")
				Console.WriteLine("|______________________________________________|")
				Console.Write( ">>> ")
				sel = Console.ReadLine()

				sel = sel.ToLower()

				Select
					when sel = "cashout"
						currentCashOut()
					when sel = "spendings"
						currentSpend()
					when sel = "inventory"
						currentInven()
					when sel = "cd"
						LeaveSr 0
				EndSl
			EndDo
			LeaveSr 1
		EndFunc
		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegFunc MaintenanceMenu Access(*public) Type(*packed) Len(2,0)
			DclFld Sel Type(String)
			DclFld doLoop Type(*Packed) len(2,0) inz(1)

			Console.Clear()
			DoWhile doLoop =1
				Console.WriteLine(" ______________________________________________")
				Console.WriteLine("| InGen Cola                 Data Maintanince  |")
				Console.WriteLine("|----------------------------------------------|")
				Console.WriteLine("| UdatInv         update inventory records     |")
				Console.WriteLine("| UdatCsh         update cash colected records |")
				Console.WriteLine("| UdatSpn         update spending records      |")
				Console.WriteLine("| delinv          Delete inventory record      |")
				Console.WriteLine("| delcsh          Delete cash out records      |")
				Console.WriteLine("| delspn          Delete spending records      |")
				Console.WriteLine("| AddSoda         add new soda flavor          |")
				Console.WriteLine("| CD              Back to Main Menu            |")
				Console.WriteLine("|______________________________________________|")
				Console.Write( ">>> ")
				sel = Console.ReadLine()

				sel = sel.ToLower()

				Select
					when sel = "udatinv"
						maintUpInv()
					when sel = "udatcsh"
						upCashOut()
					when sel = "udatspn"
						udatSpnd()
					when sel = "delinv"
						delInv()
					when sel = "delcsh"
						delCashOut()
					when sel = "delspn"
						delSpending()
					when sel = "addsoda"
						maintAddSoda()
					when sel = "cd"
						LeaveSr 0
				EndSl
			EndDo
			LeaveSr 1
		EndFunc

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegFunc IsNumeric access(*protected) Type(Boolean)
			DclSrParm raw Type(String)
			Try
				Convert.ToDouble(raw)
				leaveSr *true
			Catch ex System.Exception
				leaveSr *false
			EndTry
		EndFunc 

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr DisplaySoda access(*protected)
			DclFld r Type(Int32) inz(0)
			DclFld c Type(Int32) inz(0)
			DclFld tmp Type(DataTable)

			tmp = db.showAsTable("SELECT SodaID, SodaName FROM sodas")
			
			Console.WriteLine(" _______________________")
			Console.WriteLine(String.Format("|{0,7} {1,15}|","ID","Soda"))
			Console.WriteLine("|-----------------------|")

			DoWhile r < tmp.Rows.Count
				Console.WriteLine(String.Format("|{0,7} {1,15}|", tmp.Rows(r)(0).ToString(), tmp.Rows(r)(1).ToString()))
				r = r + 1
			EndDo
			
			Console.WriteLine("|_______________________|")
		EndSr

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr NewProfets access(*protected)
			DclFld douin Type(List(*Of Double))
			DclFld datin Type(List(*Of DateTime))
			DclFld col Type(List(*Of string))
			DclFld sel Type(String)

			col = *new List(*Of String)()
			datin = *new List(*Of DateTime)()
			douin = *new List(*Of Double)()

			Console.Clear()
			Console.WriteLine(" ______________________________________________")
            Console.WriteLine ("| InGen Cola                 New Records       |")
            Console.WriteLine ("|----------------------------------------------|")
            Console.Write ("| Enter the total amount collected: ")
		    sel = Console.ReadLine()

			if sel = "q" or sel = "back"
				leavesr
			endif

			If IsNumeric(sel) = *true and isNumeric(sel) = *true
				col.Add("ernings")
				col.Add("date")

				datin.Add(DateTime.Now)
				douin.Add(Convert.ToDouble(sel))

				db.insert("cashout",col,*nothing,douin,*nothing,*nothing,datin)
			else
				Console.WriteLine("")
			EndIf

			
		EndSr

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr NewPurchase Access(*protected)
			DclFld douin Type(List(*Of Double))
			DclFld datin Type(List(*Of DateTime))
			DclFld col Type(List(*Of string))
			DclFld intin Type(List(*Of Int32))
			DclFld sel Type(String)
			DclFld money type(*packed) len(10,2) inz(0)
			DclFld lim Type(*packed) Len(10,0) inz(0)
			DclFld i Type(*packed) Len(10,0) inz(0)

			col = *new List(*Of String)()
			datin = *new List(*Of DateTime)()
			douin = *new List(*Of Double)()
			intin = *new List(*Of Int32)()


			Console.Clear()
			Console.WriteLine(" ______________________________________________")
            Console.WriteLine ("| InGen Cola                 New Records       |")
            Console.WriteLine ("|----------------------------------------------|")
            Console.Write ("| Enter the number of cans purchased: ")
		    sel = Console.ReadLine()
			
			if sel = "q" or sel = "back"
				leavesr
			endif

			if IsNumeric(sel) = *true
				lim = Convert.ToDouble(sel)
			EndIf

			DisplaySoda()
			
			
			col.Add("price")
			col.Add("crv")
			col.Add("worth")
			col.Add("net")
			col.Add("sodaID")
			col.Add("cancount")
			col.Add("date")


			DoWhile i < lim
				do
					Console.Write("| Enter Soda ID: ")
					sel = Console.ReadLine()

					if IsNumeric(sel)
						intin.Add(Convert.ToInt32(sel))
						leave
					else
						Console.WriteLine("| <<Error: input was not valid>>")
					endif
				end

				do
					Console.Write("| Enter price of unit: ")
					sel = Console.ReadLine()

					if IsNumeric(sel)
						money = Convert.ToDouble(sel)
						douin.Add(money)
						leave
					else
						Console.WriteLine("| <<Error: input was not valid>>")
					endif
				endDo

				if money > 4.5
					intin.Add(24)
				else
					intin.Add(12)
				endif

				douin.Add(.05)
				douin.Add(.5 * intin[1])
				douin.Add((.5 * intin[1])-(money + (.05 * intin[1])) )

				datin.Add(DateTime.Now)

				db.insert("Inventory", col, *nothing, douin, intin, *nothing, datin)
				douin.Clear()
				intin.Clear()
				datin.Clear()
				i = i +1
			EndDo
			
		EndSr

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr StatAdd Access(*protected)
			dclFld tmp Type( List(*Of string))
			dclFld earnings type(*packed) len(10,2) inz(0)
			dclFld i type(int32) inz(0)

			Console.Clear()
			tmp = db.showAsList("SELECT ernings FROM cashout;")

			earnings = getSum(tmp)

			Console.WriteLine("  _______________________________________")
			Console.WriteLine(" / Total Gross Earnings: " + earnings)
		EndSr

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr StatAvgg Access(*protected)
			dclFld tmp Type( List(*Of string))
			dclFld earnings type(*packed) len(10,2) inz(0)
			dclFld i type(int32) inz(0)

			Console.Clear()
			tmp = db.showAsList("SELECT ernings FROM cashout;")

			earnings = getAvrage(tmp)
			
			Console.WriteLine("  _______________________________________")
			Console.WriteLine(" / Avrage Gross Earnings: " + earnings)
		EndSr

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr StatAvgn Access(*protected)
			dclFld tmp Type( List(*Of string))
			dclFld tmp2 Type( List(*Of string))
			dclFld earnings type(*packed) len(10,2) inz(0)
			dclFld spending type(*packed) len(10,2) inz(0)
			dclFld i type(int32) inz(0)
			dclFld units type(int32) inz(0)

			Console.Clear()
			tmp = db.showAsList("SELECT ernings FROM cashout;")
			tmp2 = db.showAsList("SELECT price FROM spendings;")

			earnings = getSum(tmp)
			spending = getSum(tmp2)

			units = (tmp2.Count + tmp.Count) / 2
			if units <> 0
				earnings = (earnings - spending) / units
			else
				earnings = 0
			endif
			
			Console.WriteLine("  _______________________________________")
			Console.WriteLine(" / Avrage Net Earnings: " + earnings)
		EndSr

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr StatAvgs Access(*protected)
			dclFld tmp Type( List(*Of string))
			dclFld earnings type(*packed) len(10,2) inz(0)

			Console.Clear()
			tmp = db.showAsList("SELECT price FROM spendings;")

			earnings = getAvrage(tmp)
			
			Console.WriteLine("  _______________________________________")
			Console.WriteLine(" / Avrage weekley Spendings: " + earnings)
		EndSr

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr StatSum Access(*protected)
			dclFld tmp Type( List(*Of string))
			dclFld tmp2 Type( List(*Of string))
			dclFld earnings type(*packed) len(10,2) inz(0)
			dclFld spending type(*packed) len(10,2) inz(0)
			dclFld i type(int32) inz(0)

			Console.Clear()
			tmp = db.showAsList("SELECT ernings FROM cashout;")
			tmp2 = db.showAsList("SELECT price FROM spendings;")

			earnings = getSum(tmp)
			spending = getSum(tmp2)

			earnings = (earnings - spending) 
			
			Console.WriteLine("  _______________________________________")
			Console.WriteLine(" / Total Net Earnings: " + earnings)
		EndSr

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr StatWeekEst Access(*protected)
			dclFld tmp Type(DataTable)
			dclFld i type(int32) inz(0)

			Console.Clear()
			tmp = db.showAsTable("select sum(worth), date from inventory where YEAR(date) = YEAR(NOW()) group by date;")

			
			DoWhile i < tmp.Rows.Count
				If %rem (i, 20) = 0
					Console.WriteLine(" __________________________")
					Console.WriteLine(String.Format("| {0,10} {1,13} |","Earnings","Date"))
					Console.WriteLine("|--------------------------|")
				EndIF

				Console.WriteLine(String.Format("|{0,10} {1,15}|",tmp.Rows[i][0].ToString(), Convert.ToDateTime(tmp.Rows[i][1].ToString()).ToString("M/d/yyyy")))
				i = i+1
			EndDo
		EndSr
		
		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr StatNet Access(*protected)
			dclFld tmp Type(DataTable)
			dclFld i type(int32) inz(0)
			dclFld sname type(string)
			dclFld cost type(string)
			dclFld numcans type(string)
			dclFld sales type(string)
			dclFld ppcan type(string)
			dclFld netpr type(string)

			Console.Clear()
			tmp = db.showAsTable("SELECT SodaName, (Price + crv), cancount, ((Price + crv) / cancount), Worth, (Worth - (Price + crv)) FROM Inventory INNER JOIN Sodas ON Sodas.SodaID = Inventory.sodaID WHERE YEAR(date) = YEAR(NOW()) ORDER BY Inventory.id DESC;")

			
			DoWhile i < tmp.Rows.Count
				If %rem (i, 20) = 0
					Console.WriteLine("___________________________________________________________________________________________")
				    Console.WriteLine( "    NAME      |    COSTS     |  # OF CANS   | PRICE PER CAN |   SALES       |      NET     ")
				    Console.WriteLine( "-------------------------------------------------------------------------------------------")
				EndIF

				sname = tmp.Rows[i][0].ToString()
				cost = Convert.ToDouble(tmp.Rows[i][1].ToString()).ToString("C")
				numCans = Convert.ToDouble(tmp.Rows[i][2].ToString()).ToString("N0")
				ppcan = Convert.ToDouble(tmp.Rows[i][3].ToString()).ToString("C")
				sales = Convert.ToDouble(tmp.Rows[i][4].ToString()).ToString("C")
				netpr = Convert.ToDouble(tmp.Rows[i][5].ToString()).ToString("C")
				
				Console.WriteLine(String.Format("{0,14}{1,15}{2,15}{3,16}{4,16}{5,16}", sname, cost, numCans, ppcan, sales, netpr))
				i = i+1
			EndDo
		EndSr
		
		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr StatStdDiv Access(*protected)
			DclFld spending Type(List(*Of *String))
			DclFld earnings Type(List(*Of *String))
			DclFld Vspn Type(List(*Of *String))
			DclFld Vern Type(List(*Of *String))
			DclFld dt1 Type(DataTable)
			DclFld dt2 Type(DataTable)
			DclFld spn Type(Double)
			DclFld ern Type(Double)
			DclFld Aspn Type(Double)
			DclFld Aern Type(Double)

			spending = db.showAsList("SELECT price FROM spendings WHERE YEAR(NOW()) = YEAR(date);")
			earnings = db.showAsList("SELECT ernings FROM cashout WHERE YEAR(NOW()) = YEAR(date);")

			Aspn = getAvrage(spending)
			Aern = getAvrage(earnings)

			Vspn = db.showAsList("SELECT (price * price) - " + Aspn + " FROM spendings WHERE YEAR(NOW()) = YEAR(date);")
			Vern = db.showAsList("SELECT (ernings * ernings) - " + Aern + " FROM cashout WHERE YEAR(NOW()) = YEAR(date);")

			spn = System.Math.Sqrt(getAvrage(Vspn))
			ern = System.Math.Sqrt(getAvrage(Vern))

			dt1 = db.showAsTable("select date, price, ((price - " + Aspn + ") / " + spn + ") AS stddiv FROM spendings WHERE YEAR(NOW()) = YEAR(date);")
			dt2 = db.showAsTable("select ernings, ernings, ((ernings - " + Aern + ") / " + ern + ") AS stddiv FROM cashout WHERE YEAR(NOW()) = YEAR(date);")
			Console.Clear()


		EndSr
		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr currentCashOut Access(*protected)
			DclFld tmp Type(DataTable)
			DclFld sum Type(*Packed) Len(10,2) inz(0)
			DclFld i Type(Int32) inz(0)
			DclFld year Type(double) Inz(0)
			DclFld sel Type(String)

			Console.WriteLine(" _______________________________")
			Console.Write("/ Enter year to lookup ")
			sel = Console.ReadLine()

			If IsNumeric(sel) = *true
				year = %int (Convert.ToDouble(sel))
			EndIf

			tmp = db.showAsTable("SELECT * FROM cashout y where YEAR(date) = " + year)

			DoWhile i < tmp.Rows.Count
				If %rem (i, 20) = 0
					Console.WriteLine(" __________________________")
					Console.WriteLine(String.Format("| {0,10} {1,13} |","Earnings","Date"))
					Console.WriteLine("|--------------------------|")
				EndIF

				Console.WriteLine(String.Format("|{0,10} {1,15}|",tmp.Rows[i][0].ToString(), Convert.ToDateTime(tmp.Rows[i][1].ToString()).ToString("M/d/yyyy")))

				sum = sum + Convert.ToDouble(tmp.Rows[i][0].ToString())
				i = i+1
			EndDo

			Console.WriteLine("")
			Console.WriteLine("Total: " + sum.ToString("C"))
			Console.WriteLine("Over " + tmp.Rows.Count.ToString("N") + " weeks")
		EndSr

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr currentSpend Access(*protected)
			DclFld tmp Type(DataTable)
			DclFld sum Type(*Packed) Len(10,2) inz(0)
			DclFld i Type(Int32) inz(0)
			DclFld year Type(double) Inz(0)
			DclFld sel Type(String)

			Console.WriteLine(" _______________________________")
			Console.Write("/ Enter year to lookup ")
			sel = Console.ReadLine()

			If IsNumeric(sel) = *true
				year = %int (Convert.ToDouble(sel))
			EndIf

			tmp = db.showAsTable("SELECT * FROM spendings where YEAR(date) =" + year)

			DoWhile i < tmp.Rows.Count
				If %rem (i, 20) = 0
					Console.WriteLine(" __________________________")
					Console.WriteLine(String.Format("| {0,10} {1,13} |","Spendings","Date"))
					Console.WriteLine("|--------------------------|")
				EndIF

				Console.WriteLine(String.Format("|{0,10} {1,15}|",tmp.Rows[i][0].ToString(), Convert.ToDateTime(tmp.Rows[i][1].ToString()).ToString("M/d/yyyy")))

				sum = sum + Convert.ToDouble(tmp.Rows[i][0].ToString())
				i = i+1
			EndDo

			Console.WriteLine("")
			Console.WriteLine("Total: " + sum.ToString("C"))
			Console.WriteLine("Over " + tmp.Rows.Count.ToString("N") + " weeks")
		EndSr

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr currentInven Access(*protected)
			DclFld tmp Type(DataTable)
			DclFld sum Type(*Packed) Len(10,2) inz(0)
			DclFld i Type(Int32) inz(0)
			DclFld year Type(double) Inz(0)
			DclFld sel Type(String)

			Console.WriteLine(" _______________________________")
			Console.Write("/ Enter year to lookup ")
			sel = Console.ReadLine()

			If IsNumeric(sel) = *true
				year = %int (Convert.ToDouble(sel))
			EndIf

			tmp = db.showAsTable("SELECT SodaName,cancount,price,crv,worth,net,date FROM inventory INNER JOIN sodas ON sodas.SodaID = inventory.SodaID where YEAR(date) =" + year)

			DoWhile i < tmp.Rows.Count
				If %rem (i, 20) = 0
					Console.WriteLine(" __________________________")
					Console.WriteLine(String.Format("| {0,10} {1,13} |","Spendings","Date"))
					Console.WriteLine("|--------------------------|")
				EndIF

				Console.WriteLine(String.Format("|{0,10} {1,15},{2,10} {3,15},{4,10} {5,15},{6,10} |", tmp.Rows[i][0].ToString(), tmp.Rows[i][1].ToString()), tmp.Rows[i][2].ToString(), tmp.Rows[i][3].ToString(), tmp.Rows[i][4].ToString(), tmp.Rows[i][5].ToString(), tmp.Rows[i][6].ToString())
				

				sum = sum + Convert.ToDouble(tmp.Rows[i][0].ToString())
				i = i+1
			EndDo

			Console.WriteLine("")
			Console.WriteLine("Total: " + sum.ToString("C"))
			Console.WriteLine("Over " + tmp.Rows.Count.ToString("N") + " weeks")
		EndSr

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr maintUpInv Access(*protected)
			DclFld sel Type(String)
			DclFld tbl Type(DataTable)
			DclFld i Type(Int32) inz(0)
			DclFld uperLim Type(Int32) inz(0)
			DclFld lowrLim Type(Int32) inz(0)
			DclFld selID Type(Int32) inz(0)
			DclFld NewVal Type(String) inz("")
			DclFld col Type(List(*Of String))
			DclFld intin Type(List(*Of Int32))
			DclFld douin Type(List(*Of Double))
			DclFld datin Type(List(*Of DateTime))

			
			tbl = db.showAsTable("SELECT id,SodaName,cancount,price,crv,worth,net,date FROM inventory INNER JOIN sodas ON sodas.SodaID = inventory.SodaID WHERE YEAR(date) = 2016 LIMIT 30")

			// clear and display the last 30 records
			Console.Clear()
			Console.WriteLine("______________________________________________________________________")
				Console.WriteLine(String.Format("{0,5} {1,10} {2,9} {3,7} {4,7} {5,7} {6,7} {7,10}","RecID","name","can cnt","price","crv","worth","net","date"))
			Console.WriteLine("______________________________________________________________________")
			DoWhile i < tbl.Rows.Count
				Console.WriteLine(String.Format("{0,5} {1,10} {2,9} {3,7} {4,7} {5,7} {6,7} {7,10}",tbl.Rows[i][0],tbl.Rows[i][1],tbl.Rows[i][2],Convert.ToDouble(tbl.Rows[i][3]).ToString("c"),Convert.ToDouble(tbl.Rows[i][4]).ToString("c"),Convert.ToDouble(tbl.Rows[i][5]).ToString("c"),Convert.ToDouble(tbl.Rows[i][6]).ToString("c"),Convert.ToDateTime(tbl.Rows[i][7]).ToString("M/d/yyyy")))
				i = i + 1
			EndDo

			if tbl.Rows.Count <> 0
				uperLim = %int(tbl.Rows[0][0].ToString())
				lowrLim = %int(tbl.Rows[tbl.Rows.Count -1][0].ToString())

				Do
					// prompt user for recored number
					Console.WriteLine(" _________________________________")
					Console.WriteLine("/ Enter recID to update: ")
					sel = Console.ReadLine()
			
					If *this.IsNumeric(sel)
						selID = %int(sel)
					Else
						selID = -1
					EndIf

					If selID >= lowrLim And selID <= uperLim
						IF db.getEl("inventory", "id", "id=" + selID) <> ""
							leave
						Else
							Console.WriteLine("<<Error: Invalid Index >>")
						EndIf
					EndIf
				EndDo

				i = 0
				col = *new List(*Of String)()
				intin = *new List(*Of Int32)()
				Datin = *new List(*Of DateTime)()
				*this.DisplaySoda()
				Console.WriteLine("Enter New Information use * to keep value")
				// get information to update
				Do
					If NewVal <> "*"
					
						Select
							when i = 0
								col.Add("SodaID")
								If *this.IsNumeric(NewVal)
									intin.Add( %int(NewVal))
								Else
									intin.Add(0)
								EndIf
							when i = 1
								col.Add("cancount")
								If *this.IsNumeric(NewVal)
									intin.Add( %int(NewVal))
								Else
									intin.Add(0)
								EndIf
							when i = 2
								col.Add("price")
								If *this.IsNumeric(NewVal)
									douin.Add( Convert.ToDouble(NewVal))
								Else
									douin.Add(0)
								EndIf
							when i = 3
								col.Add("crv")
								If *this.IsNumeric(NewVal)
									douin.Add( Convert.ToDouble(NewVal))
								Else
									douin.Add(0)
								EndIf
							when i = 4
								col.Add("worth")
								If *this.IsNumeric(NewVal)
									douin.Add( Convert.ToDouble(NewVal))
								Else
									douin.Add(0)
								EndIf
							when i = 4
								col.Add("net")
								If *this.IsNumeric(NewVal)
									douin.Add( Convert.ToDouble(NewVal))
								Else
									douin.Add(0)
								EndIf
							when i= 5
								col.Add("datin")
								try 
									datin.Add(Convert.ToDateTime( NewVal))
								catch ex System.Exception
									datin.Add(DateTime.Now)
								EndTry
						EndSl
					EndIf
					if intin.Count = 0
						intin = *Nothing
					EndIf
					if douin.Count = 0
						douin = *Nothing
					EndIf
					if datin.Count = 0
						datin = *Nothing
					EndIf
					db.update("inventory", col, *Nothing,douin,intin,*Nothing,datin,"id="+selID)
					i = i + 1
				End
			
			EndIf
		EndSr

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr maintAddSoda Access(*public)
			DclFld col Type (List(*Of *String))
			DclFld strin Type (List(*Of *String))
			DclFld sodlist Type (List(*Of *String))
			DclFld raw Type (*String)
			DclFld tmp Type (*String)
			DclFld isCounted Type (Boolean) inz (*false)
			DclFld ans Type (String)
			DclFld i Type(*packed) Len(7,0) inz(0)
			DclFld u Type(*packed) Len(7,0) inz(0)
			

			col = *new List(*Of String)()
			strin = *new List(*Of String)()
			sodlist = db.showAsList("SELECT LOWER(SodaName) FROM Sodas;")

			col.Add("SodaName")
			col.Add("purchasFrom")
			col.Add("Note")

			DoWhile i < col.Count - 1
				Console.Write(col(i) & ": ")
				raw = Console.ReadLine()

				If col(i) = "SpdaName"
					DoWhile u < sodList.count
						If sodlist(i) = raw.ToLower()
							isCounted = *True
							leave
						EndIf
					EndDo
					u=0
					If isCounted = *True 
						Console.WriteLine("Soda already in list, do you want to ignore? (y/n)")
						ans = Console.ReadLine()
						ans = ans.toLower()
						If ans = "y" Or ans = "yes" 
							leaveSr
						Else
							i = i - 1
						EndIf
					EndIf
				EndIf

				If i >= 0
					strin.Add(raw)
				EndIf
			EndDo

			db.Insert("Sodas", col, strin, *nothing, *nothing, *nothing, *nothing)
			Console.WriteLine(String.Format("{0} {1}",strin(0), "is added to the system."))
		EndSr

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr upCashOut Access(*public)
			DclFld col Type(List(*Of String))
			DclFld douin Type(List(*Of Double))
			DclFld Datin Type(List(*Of DateTime))
			DclFld recUl Type(Int32)
			DclFld recLl Type(Int32)
			DclFld recid type(Int32)
			DclFld raw Type(String)

			Console.Clear()
			If showTop20CashOut() = *false 
				LeaveSr
			EndIF

			col = *New List(*Of String)()
			douin = *New List(*Of Double)()
			datin = *New List(*Of DateTime)()

			col.Add("ernings")
        	col.Add("date")

			raw = db.getEl("CashOut", "MIN(id)", "YEAR(date) = YEAR(NOW()) ORDER BY date DESC LIMIT 20;")
			recLl = Convert.ToInt32(raw)
			raw = db.getEl("CashOut", "MAX(id)", "YEAR(date) = YEAR(NOW()) ORDER BY date DESC LIMIT 20;")
			recUl = Convert.ToInt32(raw)

			recid = getRecID(recLl, recUl)
			Console.WriteLine("Enter New Values, use * to keep current values")

			Do
				Console.Write("Earnings: ")
				raw = Console.ReadLine()
				If raw <> "*" 
					If IsNumeric(raw) = *true
						douin.Add(Convert.ToDouble(raw))
						leave
					Else
						Console.WriteLine("<<Error: numeric value is invalid>>")
					EndIf
				Else
					col.RemoveAt(0)
                	douin = *nothing
					leave
				EndIf
			EndDo

			DoWhile *true
				Console.Write("Date: ")
				raw = Console.ReadLine()
				If raw <> "*" 
					Try
						datin.Add(Convert.ToDateTime(raw))
					Catch Error System.Exception
						Console.WriteLine("<<Error: date value is invalid>>")
					EndTry
				Else
					If col.Count > 1
						col.RemoveAt(1)
					Else
						col.RemoveAt(0)
					EndIf
					datin = *nothing
					leave
				EndIf
			EndDo

			If col.Count > 0
				db.update("CashOut", col, *Nothing, douin, *Nothing, *Nothing, datin, "id=" + recid)
			EndIf
		EndSr
		
		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr udatSpnd Access(*public)
			DclFld col Type(List(*Of *String))
			DclFld douin Type(List(*of Double))
			DclFld Datin Type(List(*of DateTime))
			DclFld raw Type(*string)
			DclFld rowidLl type(Int32)
			DclFld rowidUl type(Int32)
			DclFld rowID Type(Int32)

			Console.Clear()
			If showTop20Spending() = *false 
				LeaveSr
			EndIF

			col = *New List(*Of String)()
			douin = *New List(*Of Double)()
			datin = *New List(*Of DateTime)()

			raw = db.getEl("Spendings", "MIN(id)", "YEAR(date) = YEAR(NOW()) ORDER BY date DESC LIMIT 20;")
			rowidLl = Convert.ToInt32(raw)
			raw = db.getEl("Spendings", "MAX(id)", "YEAR(date) = YEAR(NOW()) ORDER BY date DESC LIMIT 20;")
			rowidUl = Convert.ToInt32(raw)

			col.Add("price")
			col.Add("date")

			rowID = getRecID(rowidLl, rowidUl)

			DoWhile *true
				Console.Write("Earnings: ")
				raw = Console.ReadLine()
				If raw <> "*"
					If isNumeric(raw) = *true
						douin.Add(Convert.ToDouble(raw))
						leave
					Else
						Console.WriteLine("<<Error: numeric value is invalid>>")
					EndIf
				Else
					col.RemoveAt(0)
                	douin = *nothing
				EndIf
			EndDO

			DoWhile *true
				Console.Write("Date: ")
				raw = Console.ReadLine()
				If raw <> "*" 
					Try
						datin.Add(Convert.ToDateTime(raw))
						leave
					Catch Error System.Exception
						Console.WriteLine("<<Error: date value is invalid>>")
					EndTry
				Else
					If col.Count > 1 
						col.RemoveAt(1)
					Else
						col.RemoveAt(0)
					EndIf
					datin = *nothing
				EndIf
			EndDo

			If col.Count > 0
				db.update("Spendings", col, *Nothing, douin, *Nothing, *Nothing, datin, "id =" + rowID)
			EndIf
		EndSr

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr delInv Access(*public)
			DclFld recUl Type(Int32)
			DclFld recLl Type(Int32)
			DclFld recid type(Int32)
			DclFld raw Type(String)
			DclFld rowID Type(Int32)

			Console.Clear()
			If showTop20Inventory() = *False
				LeaveSr
			EndIf

			raw = db.getEl("Inventory", "MIN(id)", "YEAR(date) = YEAR(NOW()) ORDER BY date DESC LIMIT 20;")
			recLl = Convert.ToInt32(raw)
			raw = db.getEl("Inventory", "MAX(id)", "YEAR(date) = YEAR(NOW()) ORDER BY date DESC LIMIT 20;")
			recUl = Convert.ToInt32(raw)

			rowID = getRecID(recLl, recUl)

			Console.Write("Are you sure you want to delete record: " & rowID & " (y/n): ")
			raw = Console.ReadLine()
			raw = raw.ToLower()

			If raw = "y" Or raw = "yes"
				db.runQuery(String.Format("DELETE FROM Inventory WHERE id={0};", rowID))
			EndIf
		EndSr

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr delCashOut Access(*public)
			DclFld recUl Type(Int32)
			DclFld recLl Type(Int32)
			DclFld recid type(Int32)
			DclFld raw Type(String)
			DclFld rowID Type(Int32)

			Console.Clear()
			If showTop20CashOut() = *False
				LeaveSr
			EndIf

			raw = db.getEl("Inventory", "MIN(id)", "YEAR(date) = YEAR(NOW()) ORDER BY date DESC LIMIT 20;")
			recLl = Convert.ToInt32(raw)
			raw = db.getEl("Inventory", "MAX(id)", "YEAR(date) = YEAR(NOW()) ORDER BY date DESC LIMIT 20;")
			recUl = Convert.ToInt32(raw)

			rowID = getRecID(recLl, recUl)

			Console.Write("Are you sure you want to delete record: " & rowID & " (y/n): ")
			raw = Console.ReadLine()
			raw = raw.ToLower()

			If raw = "y" Or raw = "yes"
				db.runQuery(String.Format("DELETE FROM CashOut WHERE id={0};", rowID))
			EndIf
		EndSr

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegSr delSpending Access(*public)
			DclFld recUl Type(Int32)
			DclFld recLl Type(Int32)
			DclFld recid type(Int32)
			DclFld raw Type(String)
			DclFld rowID Type(Int32)

			Console.Clear()
			If showTop20CashOut() = *False
				LeaveSR
			EndIf

			raw = db.getEl("Inventory", "MIN(id)", "YEAR(date) = YEAR(NOW()) ORDER BY date DESC LIMIT 20;")
			recLl = Convert.ToInt32(raw)
			raw = db.getEl("Inventory", "MAX(id)", "YEAR(date) = YEAR(NOW()) ORDER BY date DESC LIMIT 20;")
			recUl = Convert.ToInt32(raw)

			rowID = getRecID(recLl, recUl)

			Console.Write("Are you sure you want to delete record: " + rowID + " (y/n): ")
			raw = Console.ReadLine()
			raw = raw.ToLower()

			If raw = "y" Or raw = "yes"
				db.runQuery("DELETE FROM Spendings WHERE id=" + rowID + ";")
			EndIf
		EndSr

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegFunc showTop20CashOut Access(*public) Type(Boolean)
			DclFld dt Type(DataTable)
			DclFld tmp Type(String) inz("")
			DclFld tblStr Type(String) inz("")
			DclFld r Type(Int32) Inz(0)

			dt = db.showAsTable("SELECT * FROM CashOut ORDER BY id DESC LIMIT 20;")

			If dt.Rows.Count > 0
				Console.WriteLine(" _________________________________________")
                Console.WriteLine("|     ID      |  EARNINGS   |    DATE     |")
                Console.WriteLine("|-----------------------------------------|")
			
				DoWhile r < dt.Rows.Count
					tmp = "|"

					tblStr = String.Format("{0,13}",dt.Rows(r)(0).ToString())
					tmp = String.Format("{0}{1}",tmp, tblStr)
					tblStr = String.Format("{0,14}",Convert.ToDouble(dt.Rows(r)(1).ToString()).ToString("C"))
					tmp = String.Format("{0}{1}",tmp, tblStr)
					tblStr = String.Format("{0,14}",Convert.ToDateTime(dt.Rows(r)(2).ToString()).ToString("M/d/yyyy"))
					tmp = String.Format("{0}{1}",tmp, tblStr)

					r = r + 1
					Console.WriteLine(tmp)
				EndDO
			Else
				Console.WriteLine("<<Error: No records to display>>")
				LeaveSr *false
			EndIf
			LeaveSr *true
		EndFunc

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegFunc showTop20Inventory Access(*public) Type(Boolean)
			DclFld dt Type(DataTable)
			DclFld tmp Type(String) inz("")
			DclFld tblRow Type(String) inz("")
			DclFld rowlim Type(Int32) Inz(0)
			DclFld r Type(Int32) Inz(0)
			DclFld c Type(Int32) Inz(0)

			dt = db.showAsTable("SELECT * FROM CashOut ORDER BY id DESC LIMIT 20;")

			If dt.Rows.Count > 0
				Console.WriteLine(" ________________________________________________________________________________________________________________________")
                Console.WriteLine("      ID      |    NAME      |  # OF CANS   |    PRICE     |      CRV      |    WORTH     |      NET     |      DATE   ")
                Console.WriteLine("------------------------------------------------------------------------------------------------------------------_------")
			
				If dt.Rows.Count() < 20 
					rowlim = dt.Rows.Count() - 1
				Else
					rowlim = 19
				EndIf

				DoWhile r < dt.Rows.Count
					DoWhile c < 7
						Try
							If isNumeric(dt.Rows(r)(c).ToString()) = *false And c <> 1 
								tblRow = String.Format("{0}{1,16} ", tblRow, Convert.ToDateTime(dt.Rows(r)(c).ToString()).ToString("M/d/yyyy"))
							Else
								tblRow = String.Format("{0}{1,15} ", tblRow, dt.Rows(r)(c).ToString())
							EndIf
						Catch 
							tblRow = String.Format("{0}{1,15} ", tblRow, dt.Rows(r)(c).ToString())
						EndTry
					EndDo
					Console.WriteLine(tblRow)
                	tblRow = ""
					c = 0
				EndDO
			Else
				Console.WriteLine("<<Error: No records to display>>")
				LeaveSr *false
			EndIf
			LeaveSr *true
		EndFunc

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegFunc showTop20Spending Access(*public) Type(Boolean)
			DclFld dt Type(DataTable)
			DclFld tmp Type(String) inz("")
			DclFld tblRow Type(String) inz("")
			DclFld r Type(Int32) Inz(0)
			DclFld c Type(Int32) Inz(0)

			dt = db.showAsTable("SELECT * FROM Spendings ORDER BY id DESC LIMIT 20;")

			If dt.Rows.Count > 0
				Console.WriteLine(" __________________________________________________")
				Console.WriteLine("|       ID       |      PRICE     |      DATE      |")
				Console.WriteLine("|--------------------------------------------------|")
				tmp = ""
			
				DoWhile r < dt.Rows.Count
					tblRow = "|"
					doWhile c < 3
						If isNumeric(dt.Rows(r)(c).ToString()) = *false
							tblRow = String.Format("{0}{1,17} ", tblRow, Convert.ToDateTime(dt.Rows(r)(c).ToString()).ToString("M/d/yyyy H:mm"))
						Else
							tblRow = String.Format("{0}{1,15} |", dt.Rows(r)(c).ToString())
						EndIf
						c = c + 1
					EndDo
					Console.WriteLine(tblRow)
					r = r + 1
				EndDo
			Else	
				Console.WriteLine("<<Error: No records to display>>")
            	leaveSr *false
			EndIf
			leaveSr *true
		EndFunc

		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegFunc getRecID Access(*public) Type(Int32)
			DclSrParm lowrLim Type(Int32)
			DclSrParm uperLim Type(Int32)

			DclFld RowId Type(Int32)
			DclFld raw Type(String)

			DoWhile *true
				Console.WriteLine("Enter the record id: ")
				raw = Console.ReadLine()
				If IsNumeric(raw) = *true
					RowId = Convert.ToInt32(raw)
					If RowId >= lowrLim And RowId <= uperLim
						LeaveSr RowId
					Else
						Console.WriteLine("<<Error: not a valid input>>")
					EndIf
				Else	
					Console.WriteLine("<<Error: not a valid input>>")
				EndIF
			EndDo
			
			leaveSr -1
		EndFunc
		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegFunc getSum Access(*public) type(Double)
			DclSrParm list Type(List(*Of String))

			DclFld tmp Type(Double) Inz(0)
			DclFld i Type(Int32) inz(0)

			DoWhile i < list.Count
				Try
					tmp = tmp + System.Convert.ToDouble(list[i])
				Catch Error System.Exception
					tmp = tmp + 0
				EndTry

				i = i+1
			EndDo

			leavesr tmp
		EndFunc
		// ///////////////////////////////////////////////////////////////////////////////////////////////
		BegFunc getAvrage Access(*public) type(Double)
			DclSrParm list Type(List(*Of String))
			if list.Count <> 0
				leaveSr getSum(list) / list.Count
			else
				leavesr 0
			endif
		EndFunc
EndClass
